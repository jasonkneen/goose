"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[6190],{2515:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"tutorials/memory-mcp","title":"Memory Extension","description":"Use Memory MCP Server as a Goose Extension","source":"@site/docs/tutorials/memory-mcp.md","sourceDirName":"tutorials","slug":"/tutorials/memory-mcp","permalink":"/goose/docs/tutorials/memory-mcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Memory Extension","description":"Use Memory MCP Server as a Goose Extension"},"sidebar":"tutorialSidebar","previous":{"title":"Observability with Langfuse","permalink":"/goose/docs/tutorials/langfuse"},"next":{"title":"Architecture Overview","permalink":"/goose/docs/category/architecture-overview"}}');var r=o(4848),s=o(8453),i=o(5537),a=o(9329);o(5887);const l={title:"Memory Extension",description:"Use Memory MCP Server as a Goose Extension"},c=void 0,d={},h=[{value:"Configuration",id:"configuration",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Goose Prompt #1",id:"goose-prompt-1",level:3},{value:"Goose Output",id:"goose-output",level:3},{value:"Goose Prompt # 2",id:"goose-prompt--2",level:3},{value:"Goose Output",id:"goose-output-1",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Memory extension allows Goose to store, organize, and retrieve important information (like commands, code snippets, and configurations) across conversations, with support for both project-specific (local) and universal (global) knowledge management."}),"\n",(0,r.jsx)(n.p,{children:"This tutorial will cover enabling and using the Memory MCP Server, which is a built-in Goose extension."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure extension is enabled:"}),"\n"]}),"\n",(0,r.jsxs)(i.A,{groupId:"interface",children:[(0,r.jsxs)(a.A,{value:"cli",label:"Goose CLI",default:!0,children:[(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Run the ",(0,r.jsx)(n.code,{children:"configure"})," command:"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"goose configure\n"})}),(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Choose to add a ",(0,r.jsx)(n.code,{children:"Built-in Extension"})]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u250c   goose-configure \n\u2502\n\u25c7  What would you like to configure?\n\u2502  Add Extension \n\u2502\n\u25c6  What type of extension would you like to add?\n// highlight-start    \n\u2502  \u25cf Built-in Extension (Use an extension that comes with Goose)\n// highlight-end  \n\u2502  \u25cb Command-line Extension \n\u2502  \u25cb Remote Extension \n\u2514  \n"})}),(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["Arrow down to the ",(0,r.jsx)(n.code,{children:"Memory"})," extension and press Enter"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u250c   goose-configure \n\u2502\n\u25c7  What would you like to configure?\n\u2502  Add Extension \n\u2502\n\u25c7  What type of extension would you like to add?\n\u2502  Built-in Extension \n\u2502\n\u25c6  Which built-in extension would you like to enable?\n\u2502  \u25cb Developer Tools \n\u2502  \u25cb Computer Controller \n// highlight-start\n\u2502  \u25cf Memory \n// highlight-end\n|  \u25cb JetBrains\n\u2514  Enabled Memory extension\n"})})]}),(0,r.jsx)(a.A,{value:"ui",label:"Goose Desktop",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.code,{children:"..."})," in the upper right corner"]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.code,{children:"Settings"})]}),"\n",(0,r.jsxs)(n.li,{children:["Under ",(0,r.jsx)(n.code,{children:"Extensions"}),", toggle ",(0,r.jsx)(n.code,{children:"Memory"})," to on."]}),"\n"]})})]}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.p,{children:"In this example, I'm going to have Goose create a personal knowledge base for me. Instead of trying to remember everything on your own, Goose can store any form of information for you from commands, local or global project knowledge, preferences, etc."}),"\n",(0,r.jsxs)(i.A,{groupId:"interface",children:[(0,r.jsxs)(a.A,{value:"cli",label:"Goose CLI",default:!0,children:[(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Open a terminal and start a new Goose session:"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"goose session\n"})})]}),(0,r.jsx)(a.A,{value:"ui",label:"Goose Desktop",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Open a new session in Goose Desktop"}),"\n"]})})]}),"\n",(0,r.jsx)(n.h3,{id:"goose-prompt-1",children:"Goose Prompt #1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"can you store these for me:\n\n1. This Docker debugging command:\n    docker logs -f --tail=100 $(docker ps -q --filter name=api)\n\n2. This Python retry pattern:\n    def retry(max_attempts=3, delay=1):\n        def decorator(func):\n            def wrapper(*args, **kwargs):\n                attempts = 0\n                while attempts < max_attempts:\n                    try:\n                        return func(*args, **kwargs)\n                    except Exception as e:\n                        attempts += 1\n                        if attempts == max_attempts:\n                            raise e\n                        time.sleep(delay)\n            return wrapper\n        return decorator\n\n3. And save this locally for the current project:\n    API Configuration:\n    PORT=3000\n    NODE_ENV=development\n    DATABASE_URL=postgresql://localhost:5432/myapp\n    REDIS_URL=redis://localhost:6379\n\nAfter storing these, show me everything you've saved.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"goose-output",children:"Goose Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"I'll help you store these items. Let me handle them one by one.\n\n[ ... storing and organizing ...]\n\nNow, let me show you everything that's been saved. I'll check both global and local memories:\n\n1. Storing Docker command in:\n    - Category: commands\n    - Tags: #docker #debugging #logs\n    - Scope: global\n\n2. Storing Python pattern in:\n    - Category: code_snippets\n    - Tags: #python #decorator #error_handling #retry\n    - Scope: global\n\n3. Storing API configuration in:\n    - Category: project_setup\n    - Tags: #config #environment #api\n    - Scope: local\n\nAll items have been stored! Here's everything in your knowledge base:\n\nCommands Category:\n    - docker logs -f --tail=100 $(docker ps -q --filter name=api)\n    Description: Shows last 100 lines and follows logs for container with 'api' in name\n\nCode Snippets Category:\n    - Python retry decorator pattern\n    Tags: #python #decorator #error_handling\n    (Use \"Show me the retry pattern\" to see full code)\n\nProject Setup Category (Local):\n    - API Configuration\n    Tags: #config #environment #api\n    (Use \"Show me the API config\" to see all variables)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"goose-prompt--2",children:"Goose Prompt # 2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Show me my saved retry pattern and delete my global docker command\n"})}),"\n",(0,r.jsx)(n.h3,{id:"goose-output-1",children:"Goose Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"First, let me show you the stored retry pattern:\n\nFound in Code Snippets Category (#python #decorator #error_handling #retry):\n\ndef retry(max_attempts=3, delay=1):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            attempts = 0\n            while attempts < max_attempts:\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    attempts += 1\n                    if attempts == max_attempts:\n                        raise e\n                    time.sleep(delay)\n        return wrapper\n    return decorator\n\nNow, removing the Docker command:\nFound and removed from Commands Category:\n- docker logs -f --tail=100 $(docker ps -q --filter name=api)\n\nCommand has been deleted successfully. Your knowledge base now contains:\n- Python retry pattern (global)\n- API Configuration (local to current project)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5887:(e,n,o)=>{o.d(n,{A:()=>s});o(6540);var t=o(2362),r=o(4848);const s=e=>{let{videoUrl:n}=e;return(0,r.jsxs)("div",{children:[(0,r.jsx)(t.A,{type:"info",icon:"\ud83c\udfa5",title:"Plug & Play",className:"alert--video",children:(0,r.jsxs)("details",{children:[(0,r.jsx)("summary",{children:"Watch the demo"}),(0,r.jsx)("div",{style:{textAlign:"center",margin:"20px 0"},children:(0,r.jsx)("iframe",{width:"100%",height:"540",src:n,title:"YouTube Short",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})})]})}),(0,r.jsx)("hr",{})]})}}}]);